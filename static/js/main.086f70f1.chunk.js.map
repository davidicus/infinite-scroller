{"version":3,"sources":["components/ModeSwitch/ModeSwitch.js","components/AppBar/AppBar.js","components/SwipeAndDismiss/SwipeAndDismiss.js","components/List/List.js","App.js","useQuery.js","index.js"],"names":["ModeSwitch","React","document","querySelector","classList","contains","darkMode","setDarkMode","ToggleButtonGroup","color","value","exclusive","onChange","toggle","prev","ToggleButton","aria-label","className","Tooltip","title","size","sx","marginRight","MainAppBar","itemsCount","langDir","useLangDirection","drawerOpen","setDrawerOpen","Box","flexGrow","position","top","left","width","zIndex","AppBar","Toolbar","IconButton","edge","mr","onClick","Typography","variant","noWrap","component","display","sm","Drawer","anchor","open","onClose","role","justifyContent","alignItems","padding","Divider","defaultProps","unify","e","changedTouches","SwipeAndDismiss","Element","children","handleDismissal","height","setHeight","dismissed","setDismissed","swipedir","setSwipedir","dist","setDist","active","setActive","startX","startY","distX","distY","startTime","cardItem","node","getBoundingClientRect","handleTouchStart","touchObj","current","pageX","pageY","Date","getTime","target","tagName","handleTouchMove","handleTouchEnd","Math","abs","window","innerWidth","ref","classnames","style","willChange","onTouchStart","onTouchMove","onTouchEnd","onMouseDown","onMouseMove","onMouseUp","onTransitionEnd","List","items","lastItemRef","loadMore","removeOnDismisall","id","filter","map","item","index","length","Card","maxWidth","CardHeader","avatar","Avatar","src","author","photoUrl","alt","name","subheader","Intl","DateTimeFormat","dateStyle","timeStyle","format","updated","CardContent","content","background","navigator","language","userLanguage","Skeleton","animation","marginBottom","App","pageNumber","setPageNumber","query","page","useState","loading","setLoading","error","setError","pageToken","setPageToken","setItems","useEffect","fetch","then","res","json","prevItems","messages","catch","useQuery","observer","disconnect","lastItem","IntersectionObserver","entries","isIntersecting","observe","Alert","severity","margin","message","theme","createTheme","palette","primary","main","secondary","pink","documentElement","setAttribute","ReactDOM","render","StrictMode","ThemeProvider","getElementById"],"mappings":"6ZAOe,SAASA,IAAa,MAEHC,WAC9BC,SAASC,cAAc,QAAQC,UAAUC,SAAS,SAHjB,mBAE5BC,EAF4B,KAElBC,EAFkB,KAYnC,OACE,eAACC,EAAA,EAAD,CACEC,MAAM,YACNC,MAAOJ,EAAW,YAAc,aAChCK,WAAS,EACTC,SAViB,WACnBV,SAASC,cAAc,QAAQC,UAAUS,OAAO,QAChDN,GAAY,SAACO,GAAD,OAAWA,MAIvB,UAME,eAACC,EAAA,EAAD,CACEL,MAAM,aACNM,aAAW,oBACXC,UAAU,uBAHZ,UAKE,cAACC,EAAA,EAAD,CAASC,MAAM,oBAAf,SACE,cAAC,IAAD,CAAaC,KAAK,QAAQC,GAAI,CAAEC,YAAa,cANjD,gBAUA,eAACP,EAAA,EAAD,CACEL,MAAM,YACNM,aAAW,mBACXC,UAAU,uBAHZ,UAKE,cAACC,EAAA,EAAD,CAASC,MAAM,mBAAf,SACE,cAAC,IAAD,CAAgBC,KAAK,QAAQC,GAAI,CAAEC,YAAa,cANpD,kBCjBS,SAASC,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WAC7BC,EAAUC,6BADiC,EAEbzB,YAAe,GAFF,mBAE1C0B,EAF0C,KAE9BC,EAF8B,KAGjD,OACE,qCACE,cAACC,EAAA,EAAD,CACER,GAAI,CACFS,SAAU,EACVC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OAEVlB,UAAU,UATZ,SAWE,cAACmB,EAAA,EAAD,CAAQL,SAAS,SAAjB,SACE,eAACM,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACErB,UAAU,oBACVG,KAAK,QACLmB,KAAK,QACL9B,MAAM,UACNO,aAAW,cACXK,GAAI,CAAEmB,GAAI,GACVC,QAAS,kBAAMb,GAAc,IAP/B,SASE,cAAC,IAAD,MAEF,cAACc,EAAA,EAAD,CACEC,QAAQ,KACRC,QAAM,EACNC,UAAU,MACVxB,GAAI,CAAES,SAAU,EAAGgB,QAAS,CAAEC,GAAI,UAJpC,6BAWN,cAACC,EAAA,EAAD,CACEC,OAAoB,QAAZxB,EAAoB,OAAS,QACrCyB,KAAMvB,EACNwB,QAAS,kBAAMvB,GAAc,IAH/B,SAKE,eAACC,EAAA,EAAD,CAAKZ,UAAU,kBAAkBmC,KAAK,eAAtC,UACE,eAACvB,EAAA,EAAD,CACEuB,KAAK,eACL/B,GAAI,CACFyB,QAAS,OACTO,eAAgB,gBAChBC,WAAY,SACZC,QAAS,wBANb,UASE,cAACb,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAACC,UAAU,MAA1C,sBAGA,cAACP,EAAA,EAAD,CACElB,KAAK,QACLmB,KAAK,QACL9B,MAAM,UACNO,aAAW,eACXK,GAAI,CAAEmB,GAAI,GACVC,QAAS,kBAAMb,GAAc,IAN/B,SAQE,cAAC,IAAD,SAGJ,cAAC4B,EAAA,EAAD,IACA,cAAC3B,EAAA,EAAD,CAAKuB,KAAK,eAAe/B,GAAI,CAAEkC,QAAS,eAAxC,SACE,cAACvD,EAAD,MAEF,cAACwD,EAAA,EAAD,IACA,cAAC3B,EAAA,EAAD,CAAKuB,KAAK,eAAe/B,GAAI,CAAEkC,QAAS,QAAxC,SACE,eAACb,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAACC,UAAU,IAA1C,oCAC0BrB,eAUtCD,EAAWkC,aAAe,CACxBjC,WAAY,G,yECrGd,SAASkC,EAAMC,GACb,OAAOA,EAAEC,eAAiBD,EAAEC,eAAe,GAAKD,EAUnC,SAASE,EAAT,GAKX,IAAD,EAJDC,EAIC,EAJDA,QACAC,EAGC,EAHDA,SACA9C,EAEC,EAFDA,UACA+C,EACC,EADDA,gBACC,EAE2B/D,aAF3B,mBAEMgE,EAFN,KAEcC,EAFd,OAIiCjE,YAAe,GAJhD,mBAIMkE,EAJN,KAIiBC,EAJjB,OAM+BnE,aAN/B,mBAMMoE,EANN,KAMgBC,EANhB,OAQuBrE,WAAe,GARtC,mBAQMsE,EARN,KAQYC,EARZ,OAU2BvE,YAAe,GAV1C,mBAUMwE,EAVN,KAUcC,EAVd,KAYKC,EAAS1E,SAAa,GACtB2E,EAAS3E,SAAa,GACtB4E,EAAQ5E,SAAa,GACrB6E,EAAQ7E,SAAa,GAErB8E,EAAY9E,SAAa,GAQ/BA,aAAgB,WAEVoE,GAAyB,UAAbA,GACdD,GAAa,KAEd,CAACC,IAIJ,IAAMW,EAAW/E,eAAkB,SAACgF,GAC9BA,GACFf,EAAUe,EAAKC,wBAAwBjB,WAK3C,SAASkB,EAAiBxB,GACxB,IAAIyB,EAAW1B,EAAMC,GAErBW,EAAY,QACZE,EAAQ,GAERG,EAAOU,QAAUD,EAASE,MAC1BV,EAAOS,QAAUD,EAASG,MAE1BR,EAAUM,SAAU,IAAIG,MAAOC,WAEC,QAA5BL,EAASM,OAAOC,SAAqBhC,EAAEC,iBACzCc,GAAU,GAKd,SAASkB,EAAgBjC,GACvB,IAAIyB,EAAW1B,EAAMC,GACrBkB,EAAMQ,QAAUD,EAASE,MAAQX,EAAOU,QACpCZ,GAAUI,EAAMQ,QAAU,GAC5Bb,EAAQK,EAAMQ,SAIlB,SAASQ,EAAelC,GACtB,IAAIyB,EAAW1B,EAAMC,GAErBe,GAAU,GAEVG,EAAMQ,QAAUD,EAASE,MAAQX,EAAOU,QAExCP,EAAMO,QAAUD,EAASG,MAAQX,EAAOS,SAEpC,IAAIG,MAAOC,UAAYV,EAAUM,SApDnB,IAuDdS,KAAKC,IAAIX,EAASE,MAAQX,EAAOU,UA3DrB,KA4DZS,KAAKC,IAAIX,EAASG,MAAQX,EAAOS,UA1DrB,KA8DZf,EAAYc,EAASE,MAAQX,EAAOU,QAAU,EAAI,OAAS,SAC3Db,EAAQwB,OAAOC,WAAa,MAE5BH,KAAKC,IAAIX,EAASG,MAAQX,EAAOS,UAnErB,KAoEZS,KAAKC,IAAIX,EAASE,MAAQX,EAAOU,UAlErB,KAsEZf,EAAYc,EAASG,MAAQX,EAAOS,QAAU,EAAI,KAAO,QACzDR,EAAMQ,QAAU,EAChBb,EAAQ,IAGRA,EAAQ,GAIVA,EAAQ,GAIZ,OACE,cAACV,EAAD,CACEoC,IAAKlB,EACL/D,UAAWkF,KAAU,mBAClBlF,EAAYA,GADM,cAEnB,gBAAiBwD,GAFE,cAGnB,aAAcN,GAHK,IAKrBiC,MAAO,CACL,WAAY7B,EACZ,WAAYN,EACZoC,WACElC,GAAaM,EAAS,iCAAmC,MAE7D6B,aAAcnB,EACdoB,YAAaX,EACbY,WAAYX,EACZY,YAAatB,EACbuB,YAAad,EACbe,UAAWd,EACXe,gBAAiB,kBAAOzC,EAAYH,IAAoB,MAnB1D,SAqBGD,ICtHQ,SAAS8C,EAAT,GAKX,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,SACAhD,EACC,EADDA,gBAEA,SAASiD,EAAkBC,GACzBlD,GAAgB,SAAClD,GAAD,OAAUA,EAAKqG,QAAO,SAACxD,GAAD,OAAOA,EAAEuD,KAAOA,QAGxD,OACE,qBAAIjG,UAAU,eAAd,UACG6F,EAAMM,KAAI,SAACC,EAAMC,GAEhB,OAAIR,EAAMS,OAAS,IAAMD,EAErB,cAACzD,EAAD,CAEE5C,UAAU,qBACV+C,gBAAiB,kBAAMiD,EAAkBI,EAAKH,KAHhD,SAKE,eAACM,EAAA,EAAD,CAAMtB,IAAKa,EAAa1F,GAAI,CAAEoG,SAAU,IAAKvF,MAAO,QAApD,UACE,cAACwF,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CACE3G,UAAU,uBACVD,aAAW,SACX6G,IAAG,yCAAoCR,EAAKS,OAAOC,UACnDC,IAAKX,EAAKS,OAAOG,OAGrB9G,MAAOkG,EAAKS,OAAOG,KACnBC,UAAW,IAAIC,KAAKC,eAAe,KAAM,CACvCC,UAAW,OACXC,UAAW,SACVC,OAAO,IAAI/C,KAAK6B,EAAKmB,YAE1B,cAACC,EAAA,EAAD,UACE,cAAC/F,EAAA,EAAD,CAAYC,QAAQ,QAAQlC,MAAM,iBAAlC,SACG4G,EAAKqB,gBAtBPrB,EAAKH,IA8BZ,cAACrD,EAAD,CAEE5C,UAAU,qBACV+C,gBAAiB,kBAAMiD,EAAkBI,EAAKH,KAHhD,SAKE,eAACM,EAAA,EAAD,CAAMnG,GAAI,CAAEoG,SAAU,IAAKvF,MAAO,QAAlC,UACE,cAACwF,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CACE3G,UAAU,uBACVI,GAAI,CAAEsH,WAAY,QAClB3H,aAAW,SACX6G,IAAG,yCAAoCR,EAAKS,OAAOC,UACnDC,IAAKX,EAAKS,OAAOG,OAGrB9G,MAAOkG,EAAKS,OAAOG,KACnBC,UAAW,IAAIC,KAAKC,eAClBQ,UAAUC,UAAYD,UAAUE,aAChC,CACET,UAAW,OACXC,UAAW,UAEbC,OAAO,IAAI/C,KAAK6B,EAAKmB,YAEzB,cAACC,EAAA,EAAD,UACE,cAAC/F,EAAA,EAAD,CAAYC,QAAQ,QAAQlC,MAAM,iBAAlC,SACG4G,EAAKqB,gBA1BPrB,EAAKH,OAoCH,OAAbF,EACE,oBACE/F,UAAU,yBACVI,GAAI,CACFoG,SAAU,IACVvF,MAAO,QAJX,SAOE,eAACsF,EAAA,EAAD,CAAMnG,GAAI,CAAEoG,SAAU,IAAKvF,MAAO,QAAlC,UACE,cAACwF,EAAA,EAAD,CACEC,OACE,cAACoB,EAAA,EAAD,CACEC,UAAU,OACVrG,QAAQ,WACRT,MAAO,GACP+B,OAAQ,KAGZ9C,MACE,cAAC4H,EAAA,EAAD,CACEC,UAAU,OACV/E,OAAQ,GACR/B,MAAM,MACNkE,MAAO,CAAE6C,aAAc,KAG3Bf,UACE,cAACa,EAAA,EAAD,CAAUC,UAAU,OAAO/E,OAAQ,GAAI/B,MAAM,UAGjD,eAACuG,EAAA,EAAD,WACE,cAACM,EAAA,EAAD,CACEC,UAAU,OACV/E,OAAQ,GACRmC,MAAO,CAAE6C,aAAc,KAEzB,cAACF,EAAA,EAAD,CAAUC,UAAU,OAAO/E,OAAQ,GAAI/B,MAAM,gBAIjD,QDAZ2B,EAAgBJ,aAAe,CAC7BK,QAAS,MCMX+C,EAAKpD,aAAe,CAClBqD,MAAO,I,mBCvFMoC,MA/Df,WAAgB,IAAD,EACuBjJ,WAAe,GADtC,mBACNkJ,EADM,KACMC,EADN,OCTA,SAAkBC,EAAOC,GAAO,IAAD,EACdC,oBAAS,GADK,mBACrCC,EADqC,KAC5BC,EAD4B,OAElBF,oBAAS,GAFS,mBAErCG,EAFqC,KAE9BC,EAF8B,OAGVJ,mBAAS,MAHC,mBAGrCK,EAHqC,KAG1BC,EAH0B,OAIlBN,mBAAS,IAJS,mBAIrCzC,EAJqC,KAI9BgD,EAJ8B,KAuB5C,OAjBAC,qBAAU,WACRN,GAAW,GACXE,GAAS,GACTK,MAAM,GAAD,OAAIX,EAAJ,sBAAuBC,EAAvB,cACFW,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLT,GAAW,GACXI,EAAaK,EAAIN,WACjBE,GAAS,SAACM,GAAD,4BAAmBA,GAAnB,YAAiCF,EAAIG,iBAE/CC,OAAM,SAAC3G,GACN8F,GAAW,GACXE,EAAShG,GACTkG,EAAa,WAEhB,CAACR,EAAOC,IAEJ,CAAEE,UAASE,QAAO5C,QAAO8C,YAAWE,YDXYS,CALhD,2CAOLpB,GAFMK,EAHK,EAGLA,QAASE,EAHJ,EAGIA,MAAO5C,EAHX,EAGWA,MAAO8C,EAHlB,EAGkBA,UAAWE,EAH7B,EAG6BA,SAK1C7J,aACE,kBAAM,WAEAuK,EAASnF,SACXmF,EAASnF,QAAQoF,gBAGrB,IAGF,IAAMD,EAAWvK,WACXyK,EAAWzK,eACf,SAACgF,GAkBY,IAAD,EAhBNuE,IAIAgB,EAASnF,SACXmF,EAASnF,QAAQoF,aAGnBD,EAASnF,QAAU,IAAIsF,sBAAqB,SAACC,GAGvCA,EAAQ,GAAGC,gBAAgC,OAAdjB,GAC/BR,EAAcQ,MAId3E,IACF,UAAAuF,EAASnF,eAAT,SAAkByF,QAAQ7F,OAG9B,CAACuE,EAASI,IAGZ,OACE,sBAAK3I,UAAU,MAAf,UACE,cAAC,EAAD,CAAQO,WAAYsF,EAAMS,OAAQpD,UAAW2C,EAAMS,SAClDmC,EACC,eAACqB,EAAA,EAAD,CAAOC,SAAS,QAAQ3J,GAAI,CAAEa,MAAO,MAAO+I,OAAQ,eAApD,oBACUvB,EAAMwB,WAEd,KACJ,cAACrE,EAAD,CACEC,MAAOA,EACPC,YAAa2D,EACb1D,SAAU4C,EACV5F,gBAAiB8F,QE5DnBqB,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAME,IAAK,SAKjBvL,SAASwL,gBAAgBC,aACvB,OACA/C,UAAUC,UAAYD,UAAUE,cAGlC8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAeZ,MAAOA,EAAtB,SACE,cAAC,EAAD,QAGJjL,SAAS8L,eAAe,U","file":"static/js/main.086f70f1.chunk.js","sourcesContent":["import * as React from 'react';\nimport WbSunnyIcon from '@mui/icons-material/WbSunny';\nimport NightlightIcon from '@mui/icons-material/Nightlight';\nimport Tooltip from '@mui/material/Tooltip';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nexport default function ModeSwitch() {\n  // Dark mode state\n  const [darkMode, setDarkMode] = React.useState(\n    document.querySelector('body').classList.contains('dark')\n  );\n\n  // Add dark mode class\n  const handleChange = () => {\n    document.querySelector('body').classList.toggle('dark');\n    setDarkMode((prev) => !prev);\n  };\n\n  return (\n    <ToggleButtonGroup\n      color=\"secondary\"\n      value={darkMode ? 'dark-mode' : 'light-mode'}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton\n        value=\"light-mode\"\n        aria-label=\"Toggle light mode\"\n        className=\"app-bar__mode-switch\"\n      >\n        <Tooltip title=\"Toggle light mode\">\n          <WbSunnyIcon size=\"small\" sx={{ marginRight: '0.5rem' }} />\n        </Tooltip>\n        Light mode\n      </ToggleButton>\n      <ToggleButton\n        value=\"dark-mode\"\n        aria-label=\"Toggle dark mode\"\n        className=\"app-bar__mode-switch\"\n      >\n        <Tooltip title=\"Toggle dark mode\">\n          <NightlightIcon size=\"small\" sx={{ marginRight: '0.5rem' }} />\n        </Tooltip>\n        Dark mode\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Divider from '@mui/material/Divider';\nimport Drawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { useLangDirection } from 'use-lang-direction';\n\nimport ModeSwitch from '../ModeSwitch/ModeSwitch';\n\nconst propTypes = {\n  /** Total amount of messages loaded */\n  itemsCount: PropTypes.number,\n};\nexport default function MainAppBar({ itemsCount }) {\n  const langDir = useLangDirection();\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n  return (\n    <>\n      <Box\n        sx={{\n          flexGrow: 1,\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100%',\n          zIndex: '999',\n        }}\n        className=\"app-bar\"\n      >\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              className=\"app-bar__menu-btn\"\n              size=\"large\"\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              sx={{ mr: 2 }}\n              onClick={() => setDrawerOpen(true)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"div\"\n              sx={{ flexGrow: 0, display: { sm: 'block' } }}\n            >\n              Messages\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Drawer\n        anchor={langDir === 'ltr' ? 'left' : 'right'}\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n      >\n        <Box className=\"app-bar__drawer\" role=\"presentation\">\n          <Box\n            role=\"presentation\"\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: '0.5rem 0 0.5rem 1rem',\n            }}\n          >\n            <Typography variant=\"h6\" noWrap component=\"div\">\n              Settings\n            </Typography>\n            <IconButton\n              size=\"large\"\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"close drawer\"\n              sx={{ mr: 2 }}\n              onClick={() => setDrawerOpen(false)}\n            >\n              <CloseIcon />\n            </IconButton>\n          </Box>\n          <Divider />\n          <Box role=\"presentation\" sx={{ padding: '1.5rem 1rem' }}>\n            <ModeSwitch />\n          </Box>\n          <Divider />\n          <Box role=\"presentation\" sx={{ padding: '1rem' }}>\n            <Typography variant=\"h6\" noWrap component=\"p\">\n              Total messages loaded: {itemsCount}\n            </Typography>\n          </Box>\n        </Box>\n      </Drawer>\n    </>\n  );\n}\n\nMainAppBar.propTypes = propTypes;\nMainAppBar.defaultProps = {\n  itemsCount: 0,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n// Utility to return the right object from the touch/ mouse event\nfunction unify(e) {\n  return e.changedTouches ? e.changedTouches[0] : e;\n}\n\nconst propTypes = {\n  /** Type of element that this component should render as wrapper */\n  Element: PropTypes.string,\n  /** Callback to update message list when one has been dismissed */\n  handleDismissal: PropTypes.func,\n};\n\nexport default function SwipeAndDismiss({\n  Element,\n  children,\n  className,\n  handleDismissal,\n}) {\n  // Set the custom property to be able to animate the height on dismissal\n  const [height, setHeight] = React.useState();\n  // Swipe passed all requirements to register a right swipe\n  const [dismissed, setDismissed] = React.useState(false);\n  // The direction of the swipe\n  const [swipedir, setSwipedir] = React.useState();\n  // How far the swipe was (update state to trigger a render)\n  const [dist, setDist] = React.useState(0);\n  // Actively swiping so dragging should happen\n  const [active, setActive] = React.useState(false);\n  // Swipe calculations starting point\n  const startX = React.useRef(0);\n  const startY = React.useRef(0);\n  const distX = React.useRef(0);\n  const distY = React.useRef(0);\n  // Time calculations starting point\n  const startTime = React.useRef(0);\n  // Required min distance traveled to be considered swipe\n  const threshold = 150;\n  // Maximum distance allowed at the same time in perpendicular direction\n  const restraint = 100;\n  // Maximum time allowed to travel that distance\n  const allowedTime = 1000;\n\n  React.useEffect(() => {\n    // if the swipe is to the right dismiss\n    if (swipedir && swipedir === 'right') {\n      setDismissed(true);\n    }\n  }, [swipedir]);\n\n  // Use callback ref to be able to set height variable\n  // eslint-disable-next-line\n  const cardItem = React.useCallback((node) => {\n    if (node) {\n      setHeight(node.getBoundingClientRect().height);\n    }\n  });\n\n  // Start drag caclulations\n  function handleTouchStart(e) {\n    let touchObj = unify(e);\n    // Zero out the values\n    setSwipedir('none');\n    setDist(0);\n    // Set starting coordinate values\n    startX.current = touchObj.pageX;\n    startY.current = touchObj.pageY;\n    // Record time when finger first makes contact\n    startTime.current = new Date().getTime();\n    // Make sure we still allow for text to be highlighted by checking target on non touch\n    if (touchObj.target.tagName === 'DIV' || e.changedTouches) {\n      setActive(true);\n    }\n  }\n\n  // Update components position during swipe\n  function handleTouchMove(e) {\n    let touchObj = unify(e);\n    distX.current = touchObj.pageX - startX.current;\n    if (active && distX.current > 0) {\n      setDist(distX.current);\n    }\n  }\n\n  function handleTouchEnd(e) {\n    var touchObj = unify(e);\n    // No longer actively swiping\n    setActive(false);\n    // Get horizontal dist traveled by finger while in contact with surface\n    distX.current = touchObj.pageX - startX.current;\n    // Get vertical dist traveled by finger while in contact with surface\n    distY.current = touchObj.pageY - startY.current;\n    // Get time elapsed\n    if (new Date().getTime() - startTime.current <= allowedTime) {\n      // Swipe timing condition met\n      if (\n        Math.abs(touchObj.pageX - startX.current) >= threshold &&\n        Math.abs(touchObj.pageY - startY.current) <= restraint\n      ) {\n        // Distance and threshold tolerances met for horiztonal swipe\n        // if dist traveled is negative, it indicates left swipe\n        setSwipedir(touchObj.pageX - startX.current < 0 ? 'left' : 'right');\n        setDist(window.innerWidth + 100);\n      } else if (\n        Math.abs(touchObj.pageY - startY.current) >= threshold &&\n        Math.abs(touchObj.pageX - startX.current) <= restraint\n      ) {\n        // Distance and threshold tolerances met for vertical swipe\n        // if dist traveled is negative, it indicates up swipe\n        setSwipedir(touchObj.pageY - startY.current < 0 ? 'up' : 'down');\n        distX.current = 0;\n        setDist(0);\n      } else {\n        // Did not meet requirements to be considered swipe reset position back to 0\n        setDist(0);\n      }\n    } else {\n      // Did not meet requirements to be considered swipe reset position back to 0\n      setDist(0);\n    }\n  }\n\n  return (\n    <Element\n      ref={cardItem}\n      className={classnames({\n        [className]: className,\n        'swipe--active': active,\n        'swipe--out': dismissed,\n      })}\n      style={{\n        '--x-dist': dist,\n        '--height': height,\n        willChange:\n          dismissed || active ? 'transform, max-height, opacity' : null,\n      }}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n      onTransitionEnd={() => (dismissed ? handleDismissal() : null)}\n    >\n      {children}\n    </Element>\n  );\n}\n\nSwipeAndDismiss.propTypes = propTypes;\nSwipeAndDismiss.defaultProps = {\n  Element: 'li',\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from '@mui/material/Avatar';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Skeleton from '@mui/material/Skeleton';\nimport Typography from '@mui/material/Typography';\n\nimport SwipeAndDismiss from '../SwipeAndDismiss/SwipeAndDismiss';\n\nconst propTypes = {\n  /** Message list to render */\n  items: PropTypes.array,\n  /** Ref to place on last item to trigger call for more items */\n  lastItemRef: PropTypes.func,\n  /** String that let's us know we have more messages to call */\n  loadMore: function (props, propName, componentName) {\n    const { propName: data } = props;\n    if (data === undefined) return;\n    if (typeof data !== 'string' && data !== null) {\n      return new Error(\n        `The ${componentName}'s' ${propName} prop must either be a string or null`\n      );\n    }\n  },\n  /** useState Callback to update message list when a list item has been dismissed */\n  handleDismissal: PropTypes.func,\n};\nexport default function List({\n  items,\n  lastItemRef,\n  loadMore,\n  handleDismissal,\n}) {\n  function removeOnDismisall(id) {\n    handleDismissal((prev) => prev.filter((e) => e.id !== id));\n  }\n\n  return (\n    <ul className=\"message-list\">\n      {items.map((item, index) => {\n        // Add ref callback to one of the last items to trigger another fetch\n        if (items.length - 5 === index) {\n          return (\n            <SwipeAndDismiss\n              key={item.id}\n              className=\"message-list__item\"\n              handleDismissal={() => removeOnDismisall(item.id)}\n            >\n              <Card ref={lastItemRef} sx={{ maxWidth: 645, width: '90vw' }}>\n                <CardHeader\n                  avatar={\n                    <Avatar\n                      className=\"message-list__avatar\"\n                      aria-label=\"Author\"\n                      src={`http://message-list.appspot.com${item.author.photoUrl}`}\n                      alt={item.author.name}\n                    />\n                  }\n                  title={item.author.name}\n                  subheader={new Intl.DateTimeFormat('en', {\n                    dateStyle: 'full',\n                    timeStyle: 'long',\n                  }).format(new Date(item.updated))}\n                />\n                <CardContent>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {item.content}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </SwipeAndDismiss>\n          );\n        } else {\n          return (\n            <SwipeAndDismiss\n              key={item.id}\n              className=\"message-list__item\"\n              handleDismissal={() => removeOnDismisall(item.id)}\n            >\n              <Card sx={{ maxWidth: 645, width: '90vw' }}>\n                <CardHeader\n                  avatar={\n                    <Avatar\n                      className=\"message-list__avatar\"\n                      sx={{ background: '#eee' }}\n                      aria-label=\"Author\"\n                      src={`http://message-list.appspot.com${item.author.photoUrl}`}\n                      alt={item.author.name}\n                    />\n                  }\n                  title={item.author.name}\n                  subheader={new Intl.DateTimeFormat(\n                    navigator.language || navigator.userLanguage,\n                    {\n                      dateStyle: 'long',\n                      timeStyle: 'short',\n                    }\n                  ).format(new Date(item.updated))}\n                />\n                <CardContent>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {item.content}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </SwipeAndDismiss>\n          );\n        }\n      })}\n      {\n        // if there are no more page tokens then we finished loading our messages\n        loadMore !== null ? (\n          <li\n            className=\"message-list__skeleton\"\n            sx={{\n              maxWidth: 645,\n              width: '90vw',\n            }}\n          >\n            <Card sx={{ maxWidth: 645, width: '90vw' }}>\n              <CardHeader\n                avatar={\n                  <Skeleton\n                    animation=\"wave\"\n                    variant=\"circular\"\n                    width={40}\n                    height={40}\n                  />\n                }\n                title={\n                  <Skeleton\n                    animation=\"wave\"\n                    height={10}\n                    width=\"80%\"\n                    style={{ marginBottom: 6 }}\n                  />\n                }\n                subheader={\n                  <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n                }\n              />\n              <CardContent>\n                <Skeleton\n                  animation=\"wave\"\n                  height={10}\n                  style={{ marginBottom: 6 }}\n                />\n                <Skeleton animation=\"wave\" height={10} width=\"80%\" />\n              </CardContent>\n            </Card>\n          </li>\n        ) : null\n      }\n    </ul>\n  );\n}\n\nList.propTypes = propTypes;\nList.defaultProps = {\n  items: [],\n};\n","import * as React from 'react';\nimport Alert from '@mui/material/Alert';\n\nimport AppBar from './components/AppBar/AppBar';\nimport List from './components/List/List';\nimport useQuery from './useQuery';\n\nimport './App.scss';\n\nconst api = `http://message-list.appspot.com/messages`;\n\nfunction App() {\n  const [pageNumber, setPageNumber] = React.useState(1);\n  // Initial call to api and initialization of list state\n  const { loading, error, items, pageToken, setItems } = useQuery(\n    api,\n    pageNumber\n  );\n\n  React.useEffect(\n    () => () => {\n      // Disconnect from any old observers\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    },\n    []\n  );\n\n  const observer = React.useRef();\n  const lastItem = React.useCallback(\n    (node) => {\n      // If loading just return\n      if (loading) {\n        return;\n      }\n      // Disconnect from any old observers\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n      // Create a new observer\n      observer.current = new IntersectionObserver((entries) => {\n        // If lastItem is in veiwport & we have a pageToken\n        // trigger a new GET by updating pageToken state\n        if (entries[0].isIntersecting && pageToken !== null) {\n          setPageNumber(pageToken);\n        }\n      });\n      // Once component mounts tell our observer to observe it\n      if (node) {\n        observer.current?.observe(node);\n      }\n    },\n    [loading, pageToken]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar itemsCount={items.length} dismissed={items.length} />\n      {error ? (\n        <Alert severity=\"error\" sx={{ width: '60%', margin: '0 auto 1rem' }}>\n          ERROR: {error.message}\n        </Alert>\n      ) : null}\n      <List\n        items={items}\n        lastItemRef={lastItem}\n        loadMore={pageToken}\n        handleDismissal={setItems}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport default function useQuery(query, page) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [pageToken, setPageToken] = useState(null);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    fetch(`${query}?pageToken=${page}&limit=10`)\n      .then((res) => res.json())\n      .then((res) => {\n        setLoading(false);\n        setPageToken(res.pageToken);\n        setItems((prevItems) => [...prevItems, ...res.messages]);\n      })\n      .catch((e) => {\n        setLoading(false);\n        setError(e);\n        setPageToken(null);\n      });\n  }, [query, page]);\n\n  return { loading, error, items, pageToken, setItems };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { pink } from '@mui/material/colors';\n\nimport './index.scss';\nimport App from './App';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#5f41b0',\n    },\n    secondary: {\n      main: pink[300],\n    },\n  },\n});\n\ndocument.documentElement.setAttribute(\n  'lang',\n  navigator.language || navigator.userLanguage\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}